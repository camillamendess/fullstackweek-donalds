// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  cpf       String   @unique
  orders    Order[]
  cards     Card[] // Relacionamento com cartões de crédito
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String         @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[]
  products       Product[]
  Order          Order[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  products     Product[]
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   String
  MenuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  menuCategoryId String
  OrderProduct   OrderProduct[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Order {
  id               Int              @id @default(autoincrement())
  total            Float
  status           OrderStatus
  comsuptionMethod ConsumtionMethod
  restaurant       Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId     String
  OrderProducts    OrderProduct[]
  customerName     String
  customerCpf      String
  customer         Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId       String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model OrderProduct {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id         String   @id @default(uuid())
  number     String // Armazenar parcialmente para segurança
  lastFour   String // Apenas os últimos 4 dígitos
  brand      String // Visa, Mastercard, etc.
  expMonth   Int
  expYear    Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  createdAt  DateTime @default(now())
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum ConsumtionMethod {
  TAKEAWAY
  DINE_IN
}
